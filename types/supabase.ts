/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/lessons": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.lessons.id"];
          created_at?: parameters["rowFilter.lessons.created_at"];
          title?: parameters["rowFilter.lessons.title"];
          description?: parameters["rowFilter.lessons.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["lessons"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** lessons */
          lessons?: definitions["lessons"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.lessons.id"];
          created_at?: parameters["rowFilter.lessons.created_at"];
          title?: parameters["rowFilter.lessons.title"];
          description?: parameters["rowFilter.lessons.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.lessons.id"];
          created_at?: parameters["rowFilter.lessons.created_at"];
          title?: parameters["rowFilter.lessons.title"];
          description?: parameters["rowFilter.lessons.description"];
        };
        body: {
          /** lessons */
          lessons?: definitions["lessons"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/movies": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.movies.id"];
          name?: parameters["rowFilter.movies.name"];
          image_url?: parameters["rowFilter.movies.image_url"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["movies"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** movies */
          movies?: definitions["movies"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.movies.id"];
          name?: parameters["rowFilter.movies.name"];
          image_url?: parameters["rowFilter.movies.image_url"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.movies.id"];
          name?: parameters["rowFilter.movies.name"];
          image_url?: parameters["rowFilter.movies.image_url"];
        };
        body: {
          /** movies */
          movies?: definitions["movies"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/premium_content": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.premium_content.id"];
          created_at?: parameters["rowFilter.premium_content.created_at"];
          video_url?: parameters["rowFilter.premium_content.video_url"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["premium_content"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** premium_content */
          premium_content?: definitions["premium_content"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.premium_content.id"];
          created_at?: parameters["rowFilter.premium_content.created_at"];
          video_url?: parameters["rowFilter.premium_content.video_url"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.premium_content.id"];
          created_at?: parameters["rowFilter.premium_content.created_at"];
          video_url?: parameters["rowFilter.premium_content.video_url"];
        };
        body: {
          /** premium_content */
          premium_content?: definitions["premium_content"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profile": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profile.id"];
          created_at?: parameters["rowFilter.profile.created_at"];
          is_subscribed?: parameters["rowFilter.profile.is_subscribed"];
          interval?: parameters["rowFilter.profile.interval"];
          stripe_customer_id?: parameters["rowFilter.profile.stripe_customer_id"];
          email?: parameters["rowFilter.profile.email"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profile"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profile */
          profile?: definitions["profile"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profile.id"];
          created_at?: parameters["rowFilter.profile.created_at"];
          is_subscribed?: parameters["rowFilter.profile.is_subscribed"];
          interval?: parameters["rowFilter.profile.interval"];
          stripe_customer_id?: parameters["rowFilter.profile.stripe_customer_id"];
          email?: parameters["rowFilter.profile.email"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profile.id"];
          created_at?: parameters["rowFilter.profile.created_at"];
          is_subscribed?: parameters["rowFilter.profile.is_subscribed"];
          interval?: parameters["rowFilter.profile.interval"];
          stripe_customer_id?: parameters["rowFilter.profile.stripe_customer_id"];
          email?: parameters["rowFilter.profile.email"];
        };
        body: {
          /** profile */
          profile?: definitions["profile"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/questions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.questions.id"];
          created_at?: parameters["rowFilter.questions.created_at"];
          answers?: parameters["rowFilter.questions.answers"];
          content?: parameters["rowFilter.questions.content"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["questions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** questions */
          questions?: definitions["questions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.questions.id"];
          created_at?: parameters["rowFilter.questions.created_at"];
          answers?: parameters["rowFilter.questions.answers"];
          content?: parameters["rowFilter.questions.content"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.questions.id"];
          created_at?: parameters["rowFilter.questions.created_at"];
          answers?: parameters["rowFilter.questions.answers"];
          content?: parameters["rowFilter.questions.content"];
        };
        body: {
          /** questions */
          questions?: definitions["questions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user_record": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_record.id"];
          created_at?: parameters["rowFilter.user_record.created_at"];
          score?: parameters["rowFilter.user_record.score"];
          currentQuestionId?: parameters["rowFilter.user_record.currentQuestionId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_record"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_record */
          user_record?: definitions["user_record"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_record.id"];
          created_at?: parameters["rowFilter.user_record.created_at"];
          score?: parameters["rowFilter.user_record.score"];
          currentQuestionId?: parameters["rowFilter.user_record.currentQuestionId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_record.id"];
          created_at?: parameters["rowFilter.user_record.created_at"];
          score?: parameters["rowFilter.user_record.score"];
          currentQuestionId?: parameters["rowFilter.user_record.currentQuestionId"];
        };
        body: {
          /** user_record */
          user_record?: definitions["user_record"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  lessons: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    title?: string;
    /** Format: text */
    description?: string;
  };
  movies: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: public.movie
     * @enum {string}
     */
    name?: "Godfellas" | "Godfather" | "Scarface" | "True detective";
    /** Format: text */
    image_url?: string;
  };
  premium_content: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `lessons.id`.<fk table='lessons' column='id'/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    video_url?: string;
  };
  profile: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: boolean */
    is_subscribed?: boolean;
    /** Format: text */
    interval?: string;
    /** Format: text */
    stripe_customer_id?: string;
    /** Format: text */
    email?: string;
  };
  questions: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: ARRAY */
    answers: unknown[];
    /** Format: text */
    content: string;
  };
  user_record: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: integer */
    score?: number;
    /** Format: integer */
    currentQuestionId?: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description lessons */
  "body.lessons": definitions["lessons"];
  /** Format: bigint */
  "rowFilter.lessons.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.lessons.created_at": string;
  /** Format: text */
  "rowFilter.lessons.title": string;
  /** Format: text */
  "rowFilter.lessons.description": string;
  /** @description movies */
  "body.movies": definitions["movies"];
  /** Format: bigint */
  "rowFilter.movies.id": string;
  /** Format: public.movie */
  "rowFilter.movies.name": string;
  /** Format: text */
  "rowFilter.movies.image_url": string;
  /** @description premium_content */
  "body.premium_content": definitions["premium_content"];
  /** Format: bigint */
  "rowFilter.premium_content.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.premium_content.created_at": string;
  /** Format: text */
  "rowFilter.premium_content.video_url": string;
  /** @description profile */
  "body.profile": definitions["profile"];
  /** Format: uuid */
  "rowFilter.profile.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profile.created_at": string;
  /** Format: boolean */
  "rowFilter.profile.is_subscribed": string;
  /** Format: text */
  "rowFilter.profile.interval": string;
  /** Format: text */
  "rowFilter.profile.stripe_customer_id": string;
  /** Format: text */
  "rowFilter.profile.email": string;
  /** @description questions */
  "body.questions": definitions["questions"];
  /** Format: bigint */
  "rowFilter.questions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.questions.created_at": string;
  /** Format: ARRAY */
  "rowFilter.questions.answers": string;
  /** Format: text */
  "rowFilter.questions.content": string;
  /** @description user_record */
  "body.user_record": definitions["user_record"];
  /** Format: uuid */
  "rowFilter.user_record.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.user_record.created_at": string;
  /** Format: integer */
  "rowFilter.user_record.score": string;
  /** Format: integer */
  "rowFilter.user_record.currentQuestionId": string;
}

export interface operations {}

export interface external {}
